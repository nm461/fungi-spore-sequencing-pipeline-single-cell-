#!/bin/bash
#$ -N TESTOV54_pipeline
#$ -cwd
#$ -l h_rt=72:00:00
#$ -l s_vmem=16G,mem_req=16G
#$ -pe def_slot 8
#$ -o $HOME/logs/TESTOV54_pipeline.log
#$ -e $HOME/logs/TESTOV54_pipeline.err

set -e
set -x

# --- Load modules ---
module use /usr/local/package/modulefiles
module load apptainer
module load blast+/2.15.0
module load repeatmasker/4.1.6

# --- Add rmblast to PATH ---
export PATH="$HOME/tools/rmblast/rmblast-2.14.1/bin:$PATH"

# --- Directories and inputs ---
OUT_DIR="$HOME/TESTOV54_out"
SIF_DIR="$HOME/sif_images"
DATA_DIR="$HOME/spore1All/sag/spore_1_sc"
DB_DIR="$HOME/databases/kraken2_minusb_20250714"
BUSCO_LINEAGE="$HOME/fungi_odb10"
MULTIQC_CUSTOM="$HOME/multiqc_custom"

R1="$DATA_DIR/spore_1_sc-00210_1.fastq.gz"
R2="$DATA_DIR/spore_1_sc-00210_2.fastq.gz"
mkdir -p "$OUT_DIR"

# --- 1. Fastp ---
singularity exec "$SIF_DIR/fastp.sif" fastp \
    -i "$R1" -I "$R2" \
    -o "$OUT_DIR/trimmed_R1.fastq.gz" \
    -O "$OUT_DIR/trimmed_R2.fastq.gz" \
    --thread $NSLOTS \
    --length_required 100 \
    > "$OUT_DIR/fastp.log" 2>&1

# --- 2. SPAdes assembly ---
export PATH=~/coassembly/bin/SPAdes-4.2.0-Linux/bin:$PATH
spades.py -1 "$OUT_DIR/trimmed_R1.fastq.gz" \
          -2 "$OUT_DIR/trimmed_R2.fastq.gz" \
          -o "$OUT_DIR/spades_out" \
          --threads $NSLOTS \
          --memory 120 \
    > "$OUT_DIR/spades.log" 2>&1

ASSEMBLY="$OUT_DIR/spades_out/contigs.fasta"

# --- 3. Kraken2 ---
singularity exec "$SIF_DIR/kraken2.sif" kraken2 \
    --db "$DB_DIR" \
    --report "$OUT_DIR/kraken_report.txt" \
    --paired "$OUT_DIR/trimmed_R1.fastq.gz" "$OUT_DIR/trimmed_R2.fastq.gz" \
    > "$OUT_DIR/kraken_output.txt" 2>&1

# --- 4. BUSCO ---
export OMP_NUM_THREADS=1
export OPENBLAS_NUM_THREADS=1
export NUMEXPR_NUM_THREADS=1
export MKL_NUM_THREADS=1

singularity exec -B "$OUT_DIR":"$OUT_DIR" "$SIF_DIR/busco_v6.0.0_cv1.sif" busco \
    -i "$ASSEMBLY" \
    -o busco_spades \
    -l "$BUSCO_LINEAGE" \
    -m genome \
    --cpu 2 \
    --out_path "$OUT_DIR" \
    > "$OUT_DIR/busco_spades.log" 2>&1

# --- 5. Mapping reads with BWA/Samtools ---
singularity exec "$SIF_DIR/bwa.sif" bwa index "$ASSEMBLY"
singularity exec "$SIF_DIR/bwa.sif" bwa mem -t $NSLOTS \
    "$ASSEMBLY" "$OUT_DIR/trimmed_R1.fastq.gz" "$OUT_DIR/trimmed_R2.fastq.gz" \
    | singularity exec "$SIF_DIR/samtools.sif" samtools view -bS - \
    > "$OUT_DIR/mapped.bam"

singularity exec "$SIF_DIR/samtools.sif" samtools sort -@ $NSLOTS \
    -o "$OUT_DIR/mapped.sorted.bam" "$OUT_DIR/mapped.bam"

singularity exec "$SIF_DIR/samtools.sif" samtools index "$OUT_DIR/mapped.sorted.bam"

# --- 6. Pilon polishing ---
singularity exec "$SIF_DIR/pilon.sif" java -Xmx120G -jar /pilon/pilon.jar \
    --genome "$ASSEMBLY" \
    --frags "$OUT_DIR/mapped.sorted.bam" \
    --output "$OUT_DIR/pilon_corrected" \
    --threads $NSLOTS \
    > "$OUT_DIR/pilon.log" 2>&1

PILON_ASSEMBLY="$OUT_DIR/pilon_corrected.fasta"

# --- 7. RepeatMasker (rmblast engine) ---
mkdir -p "$OUT_DIR/repeatmasker_out"
RepeatMasker -engine rmblast -pa $NSLOTS \
             -gff "$PILON_ASSEMBLY" \
             -dir "$OUT_DIR/repeatmasker_out" \
             > "$OUT_DIR/repeatmasker.log" 2>&1

# --- 8. Sourmash ---
SM_OUT="$OUT_DIR/contamination_checks/sourmash"
mkdir -p "$SM_OUT"
SIF_SM="$SIF_DIR/sourmash.sif"
SM_DB="$HOME/databases/sourmash/fungi/genbank-2022.03-fungi-k21.zip"

singularity exec "$SIF_SM" sourmash sketch dna \
    -p k=21,scaled=1000 \
    -o "$SM_OUT/assembly.sig" \
    "$PILON_ASSEMBLY"

singularity exec "$SIF_SM" sourmash gather \
    "$SM_OUT/assembly.sig" \
    "$SM_DB" \
    -o "$SM_OUT/gather_results.csv"

echo "TESTOV54 pipeline finished successfully. Results are in $OUT_DIR."

summary_file="$OUTDIR/pipeline_summary5_report.txt"

echo "=== Bioinformatics Pipeline Summary Report ===" > "$summary_file"
echo "Generated on: $(date)" >> "$summary_file"
echo "" >> "$summary_file"

## -------------------------------
## BUSCO
## -------------------------------
echo "=== BUSCO Completeness (busco_spades.log) ===" >> "$summary_file"
busco_log="$OUTDIR/busco_spades.log"
if [ -f "$busco_log" ]; then
    grep -E "C:[0-9.]+%\[S:[0-9.]+%,D:[0-9.]+%\],F:[0-9.]+%,M:[0-9.]+%,n:[0-9]+" "$busco_log" >> "$summary_file" || echo "BUSCO summary not found in log." >> "$summary_file"
else
    echo "BUSCO log not found." >> "$summary_file"
fi
echo "" >> "$summary_file"

## -------------------------------
## Kraken
## -------------------------------
echo "=== Kraken Report: Top Taxa (kraken_report.txt) ===" >> "$summary_file"
kraken_report="$OUTDIR/kraken_report.txt"
if [ -f "$kraken_report" ]; then
    head -n 10 "$kraken_report" >> "$summary_file"
else
    echo "Kraken report not found." >> "$summary_file"
fi
echo "" >> "$summary_file"

## -------------------------------
## Pilon (short summary)
## -------------------------------
echo "=== Pilon Summary (key corrections only) ===" >> "$summary_file"
pilon_log="$OUTDIR/pilon.log"
if [ -f "$pilon_log" ]; then
    # Show only lines with useful summary info (limit to 30 lines)
    grep -iE "Iteration|corrected|fixed|error|warning|Summary|Final|SNP|Indel" "$pilon_log" | tail -n 30 >> "$summary_file" || echo "No concise summary found." >> "$summary_file"
else
    echo "Pilon log not found." >> "$summary_file"
fi
echo "" >> "$summary_file"

## -------------------------------
## RepeatMasker Log
## -------------------------------
echo "=== RepeatMasker Raw Log (repeatmasker.log) ===" >> "$summary_file"
rmlog="$OUTDIR/repeatmasker.log"
if [ -f "$rmlog" ]; then
    head -n 20 "$rmlog" >> "$summary_file"
else
    echo "RepeatMasker log not found." >> "$summary_file"
fi
echo "" >> "$summary_file"

## -------------------------------
## RepeatMasker Summary Table
## -------------------------------
echo "=== RepeatMasker Repeat Class Totals (.tbl) ===" >> "$summary_file"
rmtbl="$OUTDIR/repeatmasker_out/pilon_corrected.fasta.tbl"
if [ -f "$rmtbl" ]; then
    head -n 15 "$rmtbl" | tail -n 10 >> "$summary_file"
else
    echo "RepeatMasker .tbl file not found." >> "$summary_file"
fi
echo "" >> "$summary_file"

## -------------------------------
## Sourmash Contamination Checks (cleaned)
## -------------------------------
echo "=== Sourmash Contamination Summary (Top 2 hits per CSV) ===" >> "$summary_file"

for csv in "$OUTDIR"/contamination_checks/sourmash/*.csv; do
    if [ -f "$csv" ]; then
        echo "--- $(basename "$csv") ---" >> "$summary_file"
        awk -F',' '
        NR==1 {
            for (i=1; i<=NF; i++) {
                if ($i=="f_match") f_match_idx=i
                if ($i=="f_unique_to_query") f_unique_idx=i
                if ($i=="name") name_idx=i
            }
            print "Rank\tMatch\tUnique_to_query\tName"
        }
        NR>1 && NR<=3 {
            printf "%d\t%.3f\t%.3f\t%s\n", NR-1, $f_match_idx, $f_unique_idx, $name_idx
        }' "$csv" >> "$summary_file"
        echo "" >> "$summary_file"
    fi
done

echo "" >> "$summary_file"
echo "Summary saved to: $summary_file"


