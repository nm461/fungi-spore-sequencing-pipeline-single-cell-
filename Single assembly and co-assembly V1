

### This file contains the basic scripts/code used to generate Single-assemblies, and co-assemblies using the AN and CNTW data generated by Sho-san (sporeXXX)
### In order to be able to run this code from start to finish, the following is required:        
                                                                                             # Spades --> installed using code as posted by Takahashi-san in the Spore-sequencing group   
                                                                                             # Busco .sif file --> generated by Takahashi-san          
                                                                                             # Busco fungi database file --> this needs to be downloaded on your personal laptop and transferred using filezilla (see step x)
                                                                                             # Paired end read files (fastq) 
                                                                                             # shirokane account, filezilla 
                                                                                                    



# 1. Single Assembly of SAGs Using Spades 


#!/bin/bash                                                                  # These setting are required for the qsub job scheduler in shirokane
#$ -N spades_all_sags                                                        # Run name --> has to be changed each time
#$ -o spades_all_sags.out                                                    # Desired out directory for debugging
#$ -e spades_all_sags.err                                                    # Desired err directory for debugging 
#$ -l h_vmem=16G                                                             # Desired memory allocation (note: not sure how to determine this exactly)
#$ -pe def_slot 8                                                            # Desired 
#$ -l h_rt=48:00:00                                                          # Setting for job timeout if still running 

# Load SPAdes into the PATH
export PATH=~/coassembly/bin/SPAdes-4.2.0-Linux/bin:$PATH

# Set input Directories
READ_DIR=/path/to/yourfastqfile.fastq                                        # input directory containing fastq files
SAG_DIR=/path/to/youroutputdirectory                                         # Allocates directory to place assemblies                         
mkdir -p "$SAG_DIR"                                                          # Makes above assembly directory 

# Move to the job working directory
cd $SGE_O_WORKDIR                                                            # Confirms WORKDIR already set by shirokane qsub

# Loop over all SAG sequencing files 
for FWD in "$READ_DIR"/*_1.fastq.gz; do                                       
  BASE=$(basename "$FWD" _1.fastq.gz)                                        # Sets script to run all forward reads in fastq dir
  REV="$READ_DIR/${BASE}_2.fastq.gz"                                         # Sets script to run all reverse reads in fastq dir

  # Run SPAdes
  spades.py -1 "$FWD" -2 "$REV" -o "assembly_${BASE}" -t 8 -m 64 --sc         # see readme for spades syntax specifics

  # Copy contigs if assembly was successful
  if [ -f "assembly_${BASE}/contigs.fasta" ]; then                           # This code will specify which files failed and completed
    cp "assembly_${BASE}/contigs.fasta" "$SAG_DIR/${BASE}.fna"
    echo "Assembly complete for $BASE"
  else
    echo "Assembly failed for $BASE"                                         # echo steps will be shown in specified spades_all_sags.out file
  fi
done




# 2. Separate SAGs based on species --> STEP NOT NECCESARY IF NOT RUNNING MMESEQ

# This step enables the swift concatenation of SAGs for Meta-assembly and de-duplification using mmseq
# Required .txt files containing SAG run names and their associated speecies (see read.me for specifics)

xargs cat < AN_assemblyall.txt > AN_all_contigs.fasta                        # concatnates all AN assemblies based on pre-made text file                                                                                 
xargs cat < CNTW_assemblyall.txt > CNTW_all_contigs.fasta                    # concatenates all CNTW assemblies based on pre-made text file




# 3. BUSCO (Individual SAGs)

# Chose to seperate by species after, but can also be done before running BUSCO --> this code will be run twice, requiring input output file changes etc

#!/bin/bash                                                                  # same qsub settings as before
#$ -S /bin/bash
#$ -cwd
#$ -V
#$ -N busco_batch_yourfungi_sags
#$ -o Buscologs/busco.out
#$ -e Buscologs/busco.err
#$ -pe def_slot 4
#$ -l s_vmem=4G,mem_req=4G

module use /usr/local/package/modulefiles                                    # loads module files (where apptainer/singularity is stored)
module load apptainer                                                        # loads singularity as apptainer 

set -euo pipefail
mkdir -p Buscologs
mkdir -p Busco_results/yourfungi_results                                     #  ***

# Limit threads inside container (note sure if this was necessary, worked in debugging so didnt want to remove)
export OMP_NUM_THREADS=1
export OPENBLAS_NUM_THREADS=1
export NUMEXPR_NUM_THREADS=1
export MKL_NUM_THREADS=1

IMG=/rshare1/home/nm461/busco_v6.0.0_cv1.sif                                 # This loads the Busco.sif file which needs to be transferred using filezilla 
LINEAGE=/rshare1/home/nm461/fungi_odb10                                      # This loads the database file which needs to be transferred using filezilla 
CPU=4                                                                        # sets CPU desired (again not sure how to determine what is needed)
OUTDIR=Busco_results/yourfungi_results                                       # specifies output directed made just above (see ***)                                  


# Loop over all assemblies in folder
for FOLDER in /path/to/yourassemblydirectory/assembly_spore_1_sc-*; do       # note the naming scheme of your assembly folder (see read.me for now details)
    FASTA="${FOLDER}/contigs.fasta"                                          # Calls all contig.fasta files, stored in individual assembly folders
    BASENAME=$(basename "$FOLDER")                                           # Extracts only file name for output naming                          
    OUT="${OUTDIR}/busco_${BASENAME}_run"                                    # Designates unique busco output names based on assembly folder name 

    if [[ ! -f "$FASTA" ]]; then
        echo "WARNING: FASTA not found in $FOLDER"
        continue                                                             # Shows which files were not analysed in .o file
    fi

    echo "=============================="
    echo "Running BUSCO on $FASTA â†’ $OUT at $(date)"
    echo "=============================="                                    # Shows which files were run and when in .o file

    apptainer exec "$IMG" busco \                                            # Runs busco (see read.me for syntax details)
        -i "$FASTA" \
        -m genome \
        -l "$LINEAGE" \
        -o "$OUT" \
        --cpu "$CPU"

    echo "Finished $BASENAME at $(date)"                                     # States when given files have been accessed 
done
# BUSCO results summaries displayed in : short_summary.specific.fungi_odb10.busco_<spore file name>_run.txt


# 4. Seperating BUSCO Results by Species
# Potential to optimise this section by writing code to extract quality values and add highest quality SAGs to a folder but I perfomed this by extracting all Busco results into an Excel file by species, and simply organising file by highest quality 



# 5. Spades Co-assembly 
# Assembly performed on SAGs with highest quality, as indicated by above BUSCOs steps ---> Following code uses 6 SAGs

#!/bin/bash
#$ -N yourfungi_co-assembly_SAGnumber                                        # see job scheduling code from previous steps
#$ -o yourfungi_co-assembly_SAGnumber.out                                    
#$ -e yourfungi_co-assembly_SAGnumber.err
#$ -l h_vmem=64G
#$ -pe def_slot 8
#$ -l h_rt=48:00:00

# Load SPAdes
export PATH=~/coassembly/bin/SPAdes-4.2.0-Linux/bin:$PATH        

# Directories
READ_DIR=/path/to/yourfastqfile.fastq                                        # allocates directory as per previous Spades code
OUT_DIR=/yourfungi_spadescoassemblyoutput
TMP_DIR=/tmp                                                                 # tmp dir used for debugging, may not be needed
mkdir -p "$OUT_DIR" "$TMP_DIR"

cd "$TMP_DIR"                                                                # moves to tmp dir

# Combine the 6 SAGs into single paired-end files                               
zcat "$READ_DIR/spore_1_sc-1_1.fastq.gz" \
     "$READ_DIR/spore_1_sc-2_1.fastq.gz" \
     "$READ_DIR/spore_1_sc-3_1.fastq.gz" \
     "$READ_DIR/spore_1_sc-4_1.fastq.gz" \
     "$READ_DIR/spore_1_sc-5_1.fastq.gz" \
     "$READ_DIR/spore_1_sc-6_1.fastq.gz" | gzip > R1_combined.fastq.gz       

zcat "$READ_DIR/spore_1_sc-1_2.fastq.gz" \
     "$READ_DIR/spore_1_sc-2_2.fastq.gz" \
     "$READ_DIR/spore_1_sc-3_2.fastq.gz" \
     "$READ_DIR/spore_1_sc-4_2.fastq.gz" \
     "$READ_DIR/spore_1_sc-5_2.fastq.gz" \
     "$READ_DIR/spore_1_sc-6_2.fastq.gz" | gzip > R2_combined.fastq.gz

echo "========================="
echo "Running SPAdes co-assembly (--sc mode) with 6 SAGs"                   # Echoed in .o file
echo "R1: R1_combined.fastq.gz"
echo "R2: R2_combined.fastq.gz"
echo "========================="

# Run SPAdes single-cell mode
spades.py --sc \
  -1 R1_combined.fastq.gz \
  -2 R2_combined.fastq.gz \
  -o "$OUT_DIR" -t 8 -m 64

# Copy contigs if assembly was successful                                   # This code will specify which files failed and completed
if [ -f "$OUT_DIR/contigs.fasta" ]; then
  cp "$OUT_DIR/contigs.fasta" "$OUT_DIR/coassembly_contigs.fna"
  echo "Co-assembly success: $OUT_DIR/coassembly_contigs.fna"               # echoed in .o file
else
  echo "Co-assembly failed: Check $OUT_DIR/spades.log"
fi


#  7. Graph Generation for Single and Co-assemblies Using Python

python


#  7.1 Box and Whisker plot for single assemblies  
# aim to have code to automatically create these by extracting fragmentation and quality results, currently pending


#  7.2 Dot files for fragmentation and completeness over Co-assemblies 

#BELOW TO BE PASTED IN ONE GO
import matplotlib.pyplot as plt

# Number of SAGs (NOTE: Change depedning on how many SAGs you are potting)
sags = [1, 2, 3, 4, 5, 6]

# BUSCO results (Complete %, Fragmented %)
complete = [18.8, 32.2, 47.8, 64.0, 74.3, 81.5]                           # results taken from BUSCO output files by hand (future optimisations possible)
fragmented = [17.3, 28.1, 26.3, 20.2, 16.0, 11.2]                         # same as above

# Define custom colors and size
blue = "#0072BC"   # Primary Blue                             
yellow = "#FFC740" # Yellow

plt.figure(figsize=(8,5))

# Plot Completeness/Figure configuration
plt.scatter(sags, complete, color=blue, label='Complete', s=100, marker='o')
plt.plot(sags, complete, color=blue, linestyle='--', alpha=0.7)

# Annotate Completeness Results (black text, above points)
for x, y in zip(sags, complete):
    plt.text(x, y + 1, f"{y:.1f}%", ha='center', va='bottom', fontsize=9, color='black')

# Plot Fragmentation/Figure configuration
plt.scatter(sags, fragmented, color=yellow, label='Fragmented', s=100, marker='^')
plt.plot(sags, fragmented, color=yellow, linestyle='--', alpha=0.7)

# Annotate Fragmentation Results (black text, below points)
for x, y in zip(sags, fragmented):
    plt.text(x, y - 2, f"{y:.1f}%", ha='center', va='top', fontsize=9, color='black')    # depending on results, text position may need to be changed from top to bottom 

# Labels & formatting
plt.xticks(sags)                                                          # Can be changed to desired settings 
plt.xlabel("Number of SAGs in co-assembly")
plt.ylabel("BUSCO %")
plt.title("BUSCO completeness across co-assemblies")
plt.ylim(0, 105)  # extra space for labels
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.legend()
plt.tight_layout()

# Save as PNG
plt.savefig("busco_coassembly.png", dpi=300, bbox_inches="tight")         # will save into current working directory






